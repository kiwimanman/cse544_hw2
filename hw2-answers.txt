Keith Stone
CSE 544 Winter 2014

2. B.

The various properties for the insured relationship between Vehicle and Insurance Co live in the Vehicle table.
This is due to the one to many counting. The foreign key lives here in the property called insured_by.
The other two properties, maxLossDamage and maxLiability, both also live on vehicle due to being one to one with the
foreign key insured_by.

2. C. 

Operates is a one-to-many relationship between Truck and nonProfessionalDriver. The foreign key lives on the truck
as the operated_by property in the schema.

Drives is a many-to-many relationship and requires a seperate table to model correctly in the schema. This table is
called Cars_nonProfessionalDrivers and contains an id field as a primary key and two attributes licencePlate and licenceNo
which are foreign key for the Car(licencePlate) and nonProfessionalDriver(licenceNo) respectively.

3. i.

R(A,B,C,D,E)

Decompose R using D -> B, Results in:

R'(A,C,D,E), A(D,B)

A is now in BCNF. This addresses the update anomaly where previously it would be possible to 
set say A to different values with fixed D and B. 

Decompoase R' using CE => A, Results in:

R''(C,D,E), A(D,B), B(C,E,A)

B is now in BCNF. This fixes an insert anomaly where it is impossible to insert a C,E,A record
without also linking it to D.

None of the remaining attribute sets in R'' have an X such that X != X+ != [all attributes remaining] making this BCNF.
This creates two super key sets (D) and (C,E) with a sort of many to many table in between them.

3. ii.

S(A,B,C,D,E)

First decompose S using A -> E. This fixes an insert anomly where adding A, E records is impossible without everything else.

This produces:

S'(A,B,C,D), A(A,E)

A is in BCNF, but must check S'.

Use BC -> A to decompose S'.

S''(B,C,D), A(A,E), B(B,C,A)

Relation B is in BCNF and so is S''. The relations are in BCNF. This fixes the insert anomly where a new relation
(B,C,D) cannot be inserted without also specifiying (A).

It can be shown that (B,C,D) is the minimal key for the table by calculating the closure of all sets of attributes.

A+ = AE, B+ = B, C+ = C, D+ = D, E+ = E

AB+ = ABE, AC+ = ACE, AD+ = ADE, AE+ = AE
BC+ = ABCE, BD+ = BD, BE+ = BE
CD+ = CD, CE+ = CE, DE+ = BDE

ABC+ = ABCE, ABD+ = ABDE, ABE+ = ABE
ACD+ = ACDE, ACE+ = ACE, ADE+ = ABDE
BCD+ = ABCDE, BCE+ = ABCE, CDE+ = BCDE

Minimal key is BCD. BCD -> AE.

4. A.

There are no functional dependencies.

4. B.

A -> B,
B -> C,
C -> D,
D -> A

4.C.

A -> B,
B -> A,
C -> AD,
D -> AC


6.i.a.

Q(eid, name) = E(office) E(m1) E(m2) Employee(eid, name, office) ^ Manager(eid, m1) ^ Manager(eid, m2) ^ not(Equal(m1,m2))

6.i.b.

Q(eid, name) :- Employee(eid, name, office), Manager(eid, m1), Manager(eid, m2), m1 != m2

6.i.c.

pi sub eid, name ((employee join sub employee.eid = manager.eid) join sub employee.eid = manager.eid & prior.mid != manager.mid)

6.ii.a.























